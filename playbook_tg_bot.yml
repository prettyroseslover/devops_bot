# Настройка бота
- name: Bot Playbook
  hosts: bot
  vars:
    bot_directory: /srv/tg_bot
  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 86400 #One day
      become: yes

    - name: Install Python & all
      ansible.builtin.apt:
        name: 
          - python3.11
          - python3-pip
          - python3-virtualenv
          - git
        state: latest
      become: yes

    - name: Create working directory
      ansible.builtin.file:
        path: "{{bot_directory}}"
        state: directory
        owner: "{{ansible_user}}"
        mode: 0777
      become: yes

    - name: Git clone bot repo
      ansible.builtin.git:
        repo: https://github.com/prettyroseslover/devops_bot.git
        version: docker
        dest: "{{bot_directory}}"
        clone: true

    - name: Install virualenv
      ansible.builtin.apt:
        name: python3-venv
      become: yes

    - name: Install dependencies
      ansible.builtin.pip:
        virtualenv: "{{bot_directory}}/bot/venv"
        virtualenv_python: python3.11
        requirements: "{{bot_directory}}/bot/requirements.txt"

    - name: Setup Bot environment
      ansible.builtin.copy:
        content: |
          TOKEN={{telegram.token}}
          DB_USER={{databases.master.user}}
          DB_PASSWORD={{databases.master.password}}
          DB_HOST={{invent.db.host}}
          DB_PORT={{databases.master.port}}
          DB_DATABASE={{databases.master.database}}
          RM_HOST={{remote_monitoring.host}}
          RM_PORT={{remote_monitoring.port}}
          RM_USER={{remote_monitoring.user}}
          RM_PASSWORD={{remote_monitoring.password}}
        dest: "{{bot_directory}}/bot/.env"


# Настройка мастер-бд
- name: DB Playbook
  hosts: db
  vars:
    archive_dir: "/oracle/pg_data/archive/"
  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 86400 #One day
      become: yes

    - name: Install PostgreSQL & all
      ansible.builtin.apt:
        name: 
          - postgresql
          - postgresql-contrib
          - jq # Для парсинга json
          - python3-pip
        state: latest
      become: yes

    - name: Install psycopg
      ansible.builtin.pip:
        name: psycopg2-binary
      become: yes

    - name: Create archive directory
      ansible.builtin.file:
        path: "{{archive_dir}}"
        state: directory
        owner: "postgres"
        mode: 0750
      become: yes

    - block:

      - name: Find out if PostgreSQL is initialized
        ansible.builtin.command: 
          cmd: "pg_ctlcluster 14 main status"
        register: postgres_status
        ignore_errors: true
        become: yes

      - name: Initialize PostgreSQL
        ansible.builtin.command: 
          cmd: "pg_createcluster 14 main"
        when: postgres_status.stdout.find('specified cluster \'14 main\' does not exist') != -1
        become: yes

      - name: Get pg_hba path
        ansible.builtin.shell: "pg_lsclusters --json | jq '.[].config.hba_file' | awk '{gsub(/\"/, \"\", $1); print $1}'"
        register: pg_hba_path

      - name: Get postgresql.conf path
        ansible.builtin.shell: "pg_lsclusters --json | jq '.[].configdir' | awk '{gsub(/\"/, \"\", $1); print $1}'"
        register: pg_conf_path

      - name: Setup pg_hba.conf
        ansible.builtin.blockinfile:
          create: true
          path: "{{pg_hba_path.stdout}}"
          block: | 
            local all {{databases.master.user}} peer
            host all all 0.0.0.0/0 password
            host replication {{databases.replica.user}} {{invent.db_repl.host}}/24 trust
        become: yes

      - name: Setup postgresql.conf
        ansible.builtin.blockinfile:
          create: true
          path: "{{pg_conf_path.stdout}}/postgresql.conf"
          block: | 
            listen_addresses = '*'
            port = {{databases.master.port}}
            log_destination = 'stderr'
            logging_collector = on
            log_directory = '/var/log/postgresql/'
            log_filename = 'postgresql.log'
            archive_mode = on
            archive_command = 'cp %p {{archive_dir}}/%f'
            max_wal_senders = 10
            wal_level = replica
            wal_log_hints = on
            log_replication_commands = on
        become: yes

      - name: Restart PostgreSQL
        ansible.builtin.service:
          name: postgresql@14-main
          state: restarted
        become: yes
        become_user: root

      - name: Create app database
        community.postgresql.postgresql_db:
          state: present
          name: "{{databases.master.database}}"
        become: yes

      - name: Create table Emails
        community.postgresql.postgresql_table:
          table: emails
          db: "{{databases.master.database}}"
          columns:
           - id serial primary key
           - email varchar(30) not null
        become: yes

      - name: Create table PhoneNumbers
        community.postgresql.postgresql_table:
          table: phonenumbers
          db: "{{databases.master.database}}"
          columns:
           - id serial primary key
           - phone varchar(20) not null
        become: yes

      - name: Password for db_user
        community.postgresql.postgresql_user:
          name: "{{databases.master.user}}"
          password: "{{databases.master.password}}"
        become: yes

      - name: Create db_repl_user
        community.postgresql.postgresql_user:
          name: "{{databases.replica.user}}"
          password: "{{databases.replica.password}}"
          role_attr_flags: REPLICATION,LOGIN
        become: yes

      become_user: postgres
  
   
# Настройка реплики
- name: DB REPL Playbook
  hosts: db_repl
  tasks:

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 86400 #One day
      become: yes

    - name: Install PostgreSQL & all
      ansible.builtin.apt:
        name: 
          - postgresql
          - postgresql-contrib
          - jq # Для парсинга json
          - python3-pip
        state: latest
      become: yes

    - name: Install psycopg
      ansible.builtin.pip:
        name: psycopg2-binary
      become: yes

    - block:

      - name: Find out if PostgreSQL is initialized
        ansible.builtin.command: 
          cmd: "pg_ctlcluster 14 main status"
        register: postgres_status
        ignore_errors: true
        become: yes

      - name: Initialize PostgreSQL
        ansible.builtin.command: 
          cmd: "pg_createcluster 14 main"
        when: postgres_status.stdout.find('specified cluster \'14 main\' does not exist') != -1
        become: yes

      - name: Get postgresql.conf path
        ansible.builtin.shell: "pg_lsclusters --json | jq '.[].configdir' | awk '{gsub(/\"/, \"\", $1); print $1}'"
        register: pg_conf_path

      - name: Setup postgresql.conf
        ansible.builtin.blockinfile:
          create: true
          path: "{{pg_conf_path.stdout}}/postgresql.conf"
          block: | 
            listen_addresses = 'localhost, {{invent.db_repl.host}}'
            port = {{databases.replica.port}}
        become: yes

      - name: Stop PostgreSQL
        ansible.builtin.service:
          name: postgresql@14-main
          state: stopped
        become: yes
        become_user: root

      - name: Get directory for backup
        ansible.builtin.shell: "pg_lsclusters --json | jq '.[].pgdata' | awk '{gsub(/\"/, \"\", $1); print $1}'"
        register: data_dir

      - name: Clean up directory
        ansible.builtin.file:
          state: "{{item}}"
          path: "{{data_dir.stdout}}"
          owner: postgres
          group: postgres
          mode: 0750
        with_items:
          - absent
          - directory
        become: yes
        become_user: root

      - name: Execute pg_basebackup
        ansible.builtin.command:
          cmd: |
            pg_basebackup -v -R
              -h {{invent.db.host}} -p {{databases.master.port}}
              -U {{databases.replica.user}} -w -P
              -D {{data_dir.stdout}}
        become: yes
        environment:
          PGPASSWORD: "{{ databases.replica.password }}"

      - name: Start PostgreSQL
        ansible.builtin.service:
          name: postgresql@14-main
          state: started
        become: yes
        become_user: root

      become_user: postgres